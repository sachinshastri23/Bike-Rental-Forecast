import numpy as np
import pandas as pd
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn import linear_model
import matplotlib.pyplot as plt
import os

filePath='/cxldata/datasets/project/bikes.csv'
bikesData=pd.read_csv(filePath)
bikesData.head()
bikesData['dteday'].unique()
bikesData.info()
bikesData.describe()
bikesData['windspeed'].value_counts()
bikesData['hum'].value_counts()
bikesData['temp'].value_counts()

#Feature Engineering
columnsToDrop=list(['instant','casual','registered','atemp','dteday'])
bikesData=bikesData.drop(columnsToDrop ,axis=1)

bikesData.head()

from sklearn.preprocessing import StandardScaler
columnsToScale=(['temp', 'hum', 'windspeed'])
scaler = StandardScaler()
bikesData[columnsToScale]=scaler.fit_transform(bikesData[columnsToScale])
bikesData[columnsToScale].mean(axis=0)
bikesData[columnsToScale].std()

range(bikesData.shape[0])
bikesData['dayCount'] = pd.Series(range(bikesData.shape[0]))/24
bikesData.head()

#Training Models
from sklearn.model_selection import train_test_split
np.random.seed(42)

train_set, test_set=train_test_split(bikesData, test_size=0.3, random_state=42)

print(len(train_set),'Train Set + ', len(test_set), 'Test Set')

train_set.sort_values('dayCount', axis=0, inplace=True)
test_set.sort_values('dayCount', axis=0, inplace=True)
print(len(train_set),'Train Set + ', len(test_set), 'Test Set')

def display_scores(scores):
    print("Scores:", scores)
    print("Mean:", scores.mean())
    print("Standard deviation:", scores.std())
    
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import cross_val_predict
from xgboost import XGBRegressor 

from sklearn.model_selection import cross_val_predict

trainingCols=pd.DataFrame(train_set.drop(['cnt'],axis=1))
trainingLabels=train_set['cnt']
trainingCols.head()

dec_reg=DecisionTreeRegressor(random_state=42)
dt_mae_scores= -cross_val_score(dec_reg,trainingCols,trainingLabels,
                               cv=10, scoring='neg_mean_absolute_error')
display_scores(dt_mae_scores)
dt_mse_scores=np.sqrt(-cross_val_score(dec_reg,trainingCols,trainingLabels,
                               cv=10, scoring='neg_mean_squared_error'))
display_scores(dt_mse_scores)

lin_reg=LinearRegression()
lr_mae_scores = -cross_val_score(lin_reg,trainingCols,trainingLabels,
                                cv=10,scoring='neg_mean_absolute_error')
display_scores(lr_mae_scores)
lr_mse_scores=np.sqrt (-cross_val_score(lin_reg,trainingCols,trainingLabels,
                                cv=10,scoring='neg_mean_squared_error'))
display_scores(lr_mse_scores)

forest_reg = RandomForestRegressor(random_state=42)
rf_mae_scores = -cross_val_score(forest_reg, trainingCols,trainingLabels,
                                cv=10,scoring='neg_mean_absolute_error')
display_scores(rf_mae_scores)

rf_mse_scores=np.sqrt(-cross_val_score(forest_reg, trainingCols,trainingLabels,
                                cv=10,scoring='neg_mean_squared_error'))
display_scores(rf_mse_scores)

##Fine Tuning the Model

from sklearn.model_selection import GridSearchCV

param_grid=[
    {'n_estimators': [120,150],  'max_features': [10, 12], 'max_depth': [15, 28]}]
forest_reg=RandomForestRegressor(random_state=42)
grid_search=GridSearchCV(forest_reg, param_grid, cv=5, 
                         scoring='neg_mean_squared_error')

grid_search.fit(trainingCols,trainingLabels)
grid_search.best_params_
grid_search.best_estimator_

attrbs=trainingCols.columns
num_attrbs=list(trainingCols)
num_attrbs

feature_importances=grid_search.best_estimator_.feature_importances_
sorted(zip(num_attrbs, feature_importances),reverse=True)

#Testing Model
final_model=grid_search.best_estimator_

test_set.sort_values('dayCount',axis=0,inplace=True)
test_x_cols=pd.DataFrame(test_set.drop(['cnt'],axis=1)).columns.values
test_y_cols='cnt'
X_test=test_set.loc[:,test_x_cols]
y_test=test_set.loc[:,test_y_cols]

test_set.loc[:,'predictedCounts_test']=final_model.predict(X_test)

mse=mean_squared_error(y_test, test_set.loc[:,'predictedCounts_test'])
final_mse=np.sqrt(mse)
final_mse
mse
